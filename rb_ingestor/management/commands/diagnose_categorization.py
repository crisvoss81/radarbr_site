# rb_ingestor/management/commands/diagnose_categorization.py
"""
Comando para diagnosticar problemas de categoriza√ß√£o e formata√ß√£o
"""
from django.core.management.base import BaseCommand
from rb_noticias.models import Noticia, Categoria
from collections import Counter

class Command(BaseCommand):
    help = "Diagnostica problemas de categoriza√ß√£o e formata√ß√£o"

    def handle(self, *args, **options):
        self.stdout.write("=== DIAGN√ìSTICO DE CATEGORIZA√á√ÉO E FORMATA√á√ÉO ===")
        
        # An√°lise de categoriza√ß√£o
        self.stdout.write("\nüìä AN√ÅLISE DE CATEGORIZA√á√ÉO:")
        noticias = Noticia.objects.all()
        
        if noticias.exists():
            # Contar por categoria
            categorias_count = Counter()
            for noticia in noticias:
                categoria_nome = noticia.categoria.nome if noticia.categoria else "Sem categoria"
                categorias_count[categoria_nome] += 1
            
            self.stdout.write("Distribui√ß√£o por categoria:")
            for categoria, count in categorias_count.most_common():
                self.stdout.write(f"  {categoria}: {count} not√≠cias")
            
            # Verificar se h√° problema de categoriza√ß√£o
            if len(categorias_count) == 1:
                self.stdout.write("‚ùå PROBLEMA: Todas as not√≠cias est√£o na mesma categoria!")
            elif categorias_count.most_common(1)[0][1] > len(noticias) * 0.8:
                self.stdout.write("‚ö† ATEN√á√ÉO: Mais de 80% das not√≠cias est√£o na mesma categoria!")
        else:
            self.stdout.write("Nenhuma not√≠cia encontrada")
        
        # An√°lise de formata√ß√£o
        self.stdout.write("\nüìù AN√ÅLISE DE FORMATA√á√ÉO:")
        
        if noticias.exists():
            # Verificar padr√µes de subt√≠tulos
            subtitulos_patterns = Counter()
            conteudos_identicos = 0
            
            for noticia in noticias[:10]:  # Analisar apenas as primeiras 10
                conteudo = noticia.conteudo
                
                # Extrair subt√≠tulos (h2, h3)
                import re
                subtitulos = re.findall(r'<h[23][^>]*>(.*?)</h[23]>', conteudo)
                
                if subtitulos:
                    pattern = " | ".join(subtitulos[:3])  # Primeiros 3 subt√≠tulos
                    subtitulos_patterns[pattern] += 1
                
                # Verificar se o conte√∫do √© muito gen√©rico
                if "An√°lise completa e detalhada" in conteudo:
                    conteudos_identicos += 1
            
            self.stdout.write("Padr√µes de subt√≠tulos encontrados:")
            for pattern, count in subtitulos_patterns.most_common(5):
                self.stdout.write(f"  {count}x: {pattern[:100]}...")
            
            if conteudos_identicos > 0:
                self.stdout.write(f"‚ùå PROBLEMA: {conteudos_identicos} not√≠cias com conte√∫do gen√©rico!")
            
            if len(subtitulos_patterns) == 1:
                self.stdout.write("‚ùå PROBLEMA: Todas as not√≠cias t√™m a mesma estrutura de subt√≠tulos!")
        
        # Sugest√µes de corre√ß√£o
        self.stdout.write("\nüîß SUGEST√ïES DE CORRE√á√ÉO:")
        self.stdout.write("1. Verificar fun√ß√£o _detect_category nos comandos")
        self.stdout.write("2. Melhorar detec√ß√£o de categoria baseada no conte√∫do")
        self.stdout.write("3. Diversificar templates de conte√∫do")
        self.stdout.write("4. Usar IA para gerar conte√∫do mais espec√≠fico")
        
        self.stdout.write("\n=== FIM DO DIAGN√ìSTICO ===")
