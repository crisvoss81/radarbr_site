# rb_ingestor/management/commands/improve_articles.py
"""
Comando para melhorar a qualidade dos artigos em termos de SEO
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.utils.html import strip_tags
from datetime import timedelta
from rb_noticias.models import Noticia
import re

class Command(BaseCommand):
    help = "Melhora a qualidade dos artigos em termos de SEO"

    def add_arguments(self, parser):
        parser.add_argument("--limit", type=int, default=5, help="N√∫mero de artigos a melhorar")
        parser.add_argument("--hours", type=int, default=24, help="Horas para tr√°s para buscar artigos")
        parser.add_argument("--dry-run", action="store_true", help="Apenas simula as melhorias")

    def handle(self, *args, **options):
        self.stdout.write("=== MELHORIA DE QUALIDADE DOS ARTIGOS ===")
        
        # Buscar artigos recentes
        recent_articles = Noticia.objects.filter(
            criado_em__gte=timezone.now() - timedelta(hours=options["hours"])
        ).order_by('-criado_em')[:options["limit"]]
        
        if not recent_articles:
            self.stdout.write("‚ùå Nenhum artigo encontrado")
            return
        
        self.stdout.write(f"üìä Analisando {len(recent_articles)} artigos para melhoria")
        
        improved_count = 0
        
        for i, article in enumerate(recent_articles, 1):
            self.stdout.write(f"\n--- MELHORANDO ARTIGO {i}: {article.titulo} ---")
            
            # Analisar artigo atual
            current_analysis = self._analyze_content(article.conteudo)
            self.stdout.write(f"üìù Palavras atuais: {current_analysis['word_count']}")
            self.stdout.write(f"üéØ Score SEO atual: {current_analysis['seo_score']}/100")
            
            # Verificar se precisa melhorar
            if current_analysis['word_count'] >= 600 and current_analysis['seo_score'] >= 80:
                self.stdout.write("‚úÖ Artigo j√° est√° com boa qualidade")
                continue
            
            # Gerar conte√∫do melhorado
            improved_content = self._improve_content(article.conteudo, article.titulo, article.categoria.nome if article.categoria else "geral")
            
            # Analisar conte√∫do melhorado
            improved_analysis = self._analyze_content(improved_content)
            self.stdout.write(f"üìù Palavras melhoradas: {improved_analysis['word_count']}")
            self.stdout.write(f"üéØ Score SEO melhorado: {improved_analysis['seo_score']}/100")
            
            # Aplicar melhorias
            if not options["dry_run"]:
                article.conteudo = improved_content
                article.save()
                self.stdout.write("‚úÖ Artigo melhorado e salvo!")
            else:
                self.stdout.write("üîç Modo dry-run: Simula√ß√£o apenas")
            
            improved_count += 1
        
        self.stdout.write(f"\n=== RESUMO ===")
        self.stdout.write(f"üìä Artigos analisados: {len(recent_articles)}")
        self.stdout.write(f"‚úÖ Artigos melhorados: {improved_count}")
        
        if options["dry_run"]:
            self.stdout.write("üîç Modo dry-run ativado - nenhuma altera√ß√£o foi feita")

    def _analyze_content(self, content):
        """Analisa o conte√∫do do artigo"""
        clean_content = strip_tags(content)
        words = clean_content.split()
        word_count = len(words)
        
        # Calcular score SEO b√°sico
        seo_score = 0
        
        # Score por quantidade de palavras
        if word_count >= 800:
            seo_score += 40
        elif word_count >= 600:
            seo_score += 30
        elif word_count >= 400:
            seo_score += 20
        else:
            seo_score += 10
        
        # Score por estrutura
        if '<h2>' in content:
            seo_score += 20
        if '<h3>' in content:
            seo_score += 15
        if '<ul>' in content or '<ol>' in content:
            seo_score += 10
        if '<p>' in content:
            seo_score += 10
        
        # Score por elementos SEO
        if 'class="dek"' in content:
            seo_score += 5
        
        return {
            'word_count': word_count,
            'seo_score': min(seo_score, 100)
        }

    def _improve_content(self, content, title, category):
        """Melhora o conte√∫do do artigo"""
        # Extrair informa√ß√µes b√°sicas
        clean_content = strip_tags(content)
        current_words = len(clean_content.split())
        
        # Se j√° tem mais de 600 palavras, apenas otimizar estrutura
        if current_words >= 600:
            return self._optimize_structure(content, title, category)
        
        # Se tem menos de 600 palavras, expandir conte√∫do
        return self._expand_content(content, title, category)

    def _optimize_structure(self, content, title, category):
        """Otimiza a estrutura do conte√∫do"""
        # Adicionar mais subt√≠tulos se necess√°rio
        if content.count('<h2>') < 3:
            content = self._add_more_headings(content, title, category)
        
        # Adicionar mais listas se necess√°rio
        if '<ul>' not in content and '<ol>' not in content:
            content = self._add_lists(content, category)
        
        # Melhorar densidade de palavras-chave
        content = self._improve_keyword_density(content, category)
        
        return content

    def _expand_content(self, content, title, category):
        """Expande o conte√∫do do artigo"""
        # Adicionar se√ß√µes adicionais
        additional_sections = self._generate_additional_sections(title, category)
        
        # Inserir antes da conclus√£o
        if '<h2>Conclus√£o</h2>' in content:
            content = content.replace('<h2>Conclus√£o</h2>', additional_sections + '<h2>Conclus√£o</h2>')
        else:
            content += additional_sections
        
        # Adicionar mais subt√≠tulos
        content = self._add_more_headings(content, title, category)
        
        # Adicionar listas
        content = self._add_lists(content, category)
        
        # Melhorar densidade de palavras-chave
        content = self._improve_keyword_density(content, category)
        
        return content

    def _generate_additional_sections(self, title, category):
        """Gera se√ß√µes adicionais para o artigo"""
        topic = title.lower()
        
        # Se√ß√µes baseadas na categoria
        if "pol√≠tica" in category.lower():
            sections = """
<h2>Contexto Hist√≥rico</h2>
<p>Para entender melhor a situa√ß√£o atual, √© importante analisar o contexto hist√≥rico que levou a essa situa√ß√£o. O Brasil tem passado por transforma√ß√µes significativas nos √∫ltimos anos, com mudan√ßas pol√≠ticas que impactaram diretamente a vida dos cidad√£os brasileiros.</p>

<h2>An√°lise de Especialistas</h2>
<p>Especialistas em pol√≠tica brasileira destacam que esta situa√ß√£o reflete tend√™ncias mais amplas observadas em outros pa√≠ses. A an√°lise comparativa mostra que o Brasil n√£o est√° isolado nesse processo, mas enfrenta desafios √∫nicos relacionados √† sua hist√≥ria e cultura pol√≠tica.</p>

<h2>Impacto na Sociedade</h2>
<p>O impacto dessas mudan√ßas na sociedade brasileira tem sido significativo. Desde as grandes metr√≥poles como S√£o Paulo e Rio de Janeiro at√© as cidades do interior, √© poss√≠vel observar transforma√ß√µes que afetam o dia a dia das pessoas.</p>
"""
        elif "esportes" in category.lower():
            sections = """
<h2>Hist√≥ria do Esporte no Brasil</h2>
<p>O Brasil tem uma rica tradi√ß√£o esportiva que remonta √†s primeiras d√©cadas do s√©culo XX. Desde ent√£o, o pa√≠s tem se destacado em diversas modalidades, criando uma cultura esportiva √∫nica que une pessoas de todas as classes sociais e regi√µes.</p>

<h2>Impacto Cultural</h2>
<p>O esporte no Brasil vai al√©m da competi√ß√£o. Ele representa uma forma de express√£o cultural, unindo comunidades e criando identidades regionais. Essa dimens√£o cultural do esporte √© fundamental para entender sua import√¢ncia na sociedade brasileira.</p>

<h2>Desenvolvimento e Infraestrutura</h2>
<p>Nos √∫ltimos anos, o Brasil tem investido significativamente na infraestrutura esportiva. Esses investimentos t√™m gerado resultados positivos, tanto para os atletas quanto para a popula√ß√£o em geral, que tem acesso a melhores instala√ß√µes esportivas.</p>
"""
        elif "tecnologia" in category.lower():
            sections = """
<h2>Evolu√ß√£o Tecnol√≥gica no Brasil</h2>
<p>O Brasil tem acompanhado a evolu√ß√£o tecnol√≥gica global, mas com caracter√≠sticas pr√≥prias. A adapta√ß√£o de tecnologias internacionais ao contexto brasileiro tem gerado solu√ß√µes inovadoras que atendem √†s necessidades espec√≠ficas do pa√≠s.</p>

<h2>Impacto na Economia</h2>
<p>A tecnologia tem se tornado um motor importante para o crescimento econ√¥mico brasileiro. Startups e empresas de tecnologia t√™m criado empregos e gerado riqueza, contribuindo para o desenvolvimento do pa√≠s.</p>

<h2>Desafios e Oportunidades</h2>
<p>Embora existam desafios relacionados √† infraestrutura e educa√ß√£o tecnol√≥gica, o Brasil tem grandes oportunidades de se destacar no cen√°rio tecnol√≥gico global. A criatividade e o talento brasileiros s√£o reconhecidos internacionalmente.</p>
"""
        else:
            sections = """
<h2>Contexto Nacional</h2>
<p>Esta quest√£o tem relev√¢ncia especial no contexto brasileiro, onde as particularidades locais influenciam diretamente os resultados observados. O Brasil, com sua diversidade regional e cultural, apresenta desafios e oportunidades √∫nicos.</p>

<h2>Perspectivas Futuras</h2>
<p>As proje√ß√µes para os pr√≥ximos anos indicam que esta tend√™ncia deve se manter, com poss√≠veis desenvolvimentos que podem trazer benef√≠cios adicionais para o pa√≠s. Os especialistas s√£o cautelosamente otimistas quanto ao futuro.</p>

<h2>Compara√ß√£o Internacional</h2>
<p>Quando comparamos a situa√ß√£o brasileira com outros pa√≠ses, √© poss√≠vel identificar padr√µes similares e diferen√ßas importantes. Essa an√°lise comparativa ajuda a entender melhor o contexto nacional e as possibilidades de melhoria.</p>
"""
        
        return sections

    def _add_more_headings(self, content, title, category):
        """Adiciona mais subt√≠tulos ao conte√∫do"""
        # Verificar se j√° tem subt√≠tulos suficientes
        h2_count = content.count('<h2>')
        h3_count = content.count('<h3>')
        
        if h2_count >= 4 and h3_count >= 2:
            return content
        
        # Adicionar subt√≠tulos H3 em se√ß√µes existentes
        if '<h2>An√°lise Detalhada</h2>' in content:
            content = content.replace(
                '<h2>An√°lise Detalhada</h2>',
                '<h2>An√°lise Detalhada</h2>\n<h3>Aspectos T√©cnicos</h3>\n<p>Do ponto de vista t√©cnico, esta quest√£o apresenta caracter√≠sticas espec√≠ficas que merecem aten√ß√£o especial dos profissionais da √°rea.</p>\n<h3>Implica√ß√µes Pr√°ticas</h3>\n<p>As implica√ß√µes pr√°ticas dessas mudan√ßas s√£o significativas e afetam diretamente a vida das pessoas no Brasil.</p>'
            )
        
        return content

    def _add_lists(self, content, category):
        """Adiciona listas ao conte√∫do"""
        if '<ul>' in content or '<ol>' in content:
            return content
        
        # Adicionar lista de benef√≠cios ou caracter√≠sticas
        list_content = """
<h3>Principais Caracter√≠sticas</h3>
<ul>
<li><strong>Relev√¢ncia Nacional:</strong> Impacto direto na sociedade brasileira</li>
<li><strong>Sustentabilidade:</strong> Solu√ß√£o de longo prazo para os desafios atuais</li>
<li><strong>Inova√ß√£o:</strong> Abordagem criativa e moderna</li>
<li><strong>Efici√™ncia:</strong> Resultados comprovados e mensur√°veis</li>
</ul>
"""
        
        # Inserir antes da conclus√£o
        if '<h2>Conclus√£o</h2>' in content:
            content = content.replace('<h2>Conclus√£o</h2>', list_content + '<h2>Conclus√£o</h2>')
        else:
            content += list_content
        
        return content

    def _improve_keyword_density(self, content, category):
        """Melhora a densidade de palavras-chave"""
        # Palavras-chave por categoria
        category_keywords = {
            "pol√≠tica": ["governo", "pol√≠tica", "brasil", "brasileiro", "nacional", "federal"],
            "esportes": ["esportes", "futebol", "brasil", "brasileiro", "competi√ß√£o", "atletismo"],
            "tecnologia": ["tecnologia", "digital", "brasil", "brasileiro", "inova√ß√£o", "startup"],
            "economia": ["economia", "mercado", "brasil", "brasileiro", "investimento", "finan√ßas"],
            "sa√∫de": ["sa√∫de", "medicina", "brasil", "brasileiro", "hospital", "tratamento"],
            "educa√ß√£o": ["educa√ß√£o", "escola", "brasil", "brasileiro", "universidade", "ensino"]
        }
        
        keywords = category_keywords.get(category.lower(), ["brasil", "brasileiro", "nacional"])
        
        # Adicionar palavras-chave naturalmente em par√°grafos existentes
        for keyword in keywords:
            if keyword not in content.lower():
                # Adicionar em um par√°grafo existente
                if '<p>' in content:
                    # Encontrar um par√°grafo para adicionar a palavra-chave
                    paragraphs = content.split('<p>')
                    if len(paragraphs) > 1:
                        # Adicionar no segundo par√°grafo
                        paragraphs[1] = paragraphs[1].replace(
                            '</p>',
                            f' Esta quest√£o tem especial relev√¢ncia no contexto {keyword} brasileiro.</p>',
                            1
                        )
                        content = '<p>'.join(paragraphs)
                        break
        
        return content
