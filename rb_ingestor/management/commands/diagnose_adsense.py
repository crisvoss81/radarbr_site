# rb_ingestor/management/commands/diagnose_adsense.py
"""
Comando para diagnosticar problemas do AdSense
"""
from django.core.management.base import BaseCommand
from django.conf import settings
from django.template.loader import render_to_string
from django.template import Context, Template
import requests

class Command(BaseCommand):
    help = "Diagnostica problemas do AdSense"

    def handle(self, *args, **options):
        self.stdout.write("=== DIAGN√ìSTICO ADSENSE ===")
        
        # 1. Verificar configura√ß√µes
        self._check_settings()
        
        # 2. Verificar slots
        self._check_slots()
        
        # 3. Verificar templates
        self._check_templates()
        
        # 4. Verificar conectividade
        self._check_connectivity()
        
        # 5. Verificar site em produ√ß√£o
        self._check_production_site()

    def _check_settings(self):
        self.stdout.write("\nüìã CONFIGURA√á√ïES:")
        
        adsense_client = getattr(settings, 'ADSENSE_CLIENT', 'N√ÉO CONFIGURADO')
        debug = getattr(settings, 'DEBUG', False)
        ga4_id = getattr(settings, 'GA4_ID', 'N√ÉO CONFIGURADO')
        
        self.stdout.write(f"ADSENSE_CLIENT: {adsense_client}")
        self.stdout.write(f"DEBUG: {debug}")
        self.stdout.write(f"GA4_ID: {ga4_id}")
        
        if debug:
            self.stdout.write("‚ö†Ô∏è  DEBUG=True - AdSense pode n√£o funcionar localmente")
        
        if adsense_client == 'N√ÉO CONFIGURADO':
            self.stdout.write("‚ùå ADSENSE_CLIENT n√£o configurado")
        else:
            self.stdout.write("‚úÖ ADSENSE_CLIENT configurado")

    def _check_slots(self):
        self.stdout.write("\nüéØ SLOTS CONFIGURADOS:")
        
        # Slots encontrados nos templates
        slots = [
            "7682486493",  # Home inline
            "8692315830",  # Home between cards
            "4840700734",  # Post banners
            "9538493649",  # Sidebar top
            "4286166963",  # Sidebar middle
            "3631506847",  # Sidebar bottom
        ]
        
        for slot in slots:
            if slot.startswith("123456789"):
                self.stdout.write(f"‚ùå Slot inv√°lido: {slot}")
            else:
                self.stdout.write(f"‚úÖ Slot v√°lido: {slot}")

    def _check_templates(self):
        self.stdout.write("\nüìÑ VERIFICA√á√ÉO DE TEMPLATES:")
        
        try:
            # Verificar se o template tag est√° funcionando
            from rb_portal.templatetags.adsense_extras import adsense_banner_auto
            
            # Testar gera√ß√£o de an√∫ncio
            result = adsense_banner_auto("7682486493")
            
            if "adsbygoogle" in str(result):
                self.stdout.write("‚úÖ Template tag funcionando")
            else:
                self.stdout.write("‚ö†Ô∏è  Template tag retornando placeholder")
                
        except Exception as e:
            self.stdout.write(f"‚ùå Erro no template tag: {e}")

    def _check_connectivity(self):
        self.stdout.write("\nüåê CONECTIVIDADE:")
        
        try:
            # Testar conex√£o com Google AdSense
            response = requests.get("https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js", timeout=10)
            
            if response.status_code == 200:
                self.stdout.write("‚úÖ Conectividade com Google AdSense OK")
            else:
                self.stdout.write(f"‚ö†Ô∏è  Status HTTP: {response.status_code}")
                
        except Exception as e:
            self.stdout.write(f"‚ùå Erro de conectividade: {e}")

    def _check_production_site(self):
        self.stdout.write("\nüöÄ SITE EM PRODU√á√ÉO:")
        
        site_url = getattr(settings, 'SITE_BASE_URL', 'https://www.radarbr.com')
        
        try:
            response = requests.get(site_url, timeout=10)
            
            if response.status_code == 200:
                self.stdout.write(f"‚úÖ Site acess√≠vel: {site_url}")
                
                # Verificar se AdSense est√° no HTML
                if "adsbygoogle" in response.text:
                    self.stdout.write("‚úÖ C√≥digo AdSense encontrado no HTML")
                else:
                    self.stdout.write("‚ö†Ô∏è  C√≥digo AdSense n√£o encontrado no HTML")
                    
                # Verificar se h√° erros de console
                if "adsbygoogle" in response.text and "adsbygoogle = window.adsbygoogle || []" in response.text:
                    self.stdout.write("‚úÖ Script AdSense carregado corretamente")
                else:
                    self.stdout.write("‚ö†Ô∏è  Script AdSense pode n√£o estar carregando")
                    
            else:
                self.stdout.write(f"‚ö†Ô∏è  Status HTTP: {response.status_code}")
                
        except Exception as e:
            self.stdout.write(f"‚ùå Erro ao acessar site: {e}")

    def _check_adsense_approval(self):
        self.stdout.write("\n‚úÖ APROVA√á√ÉO DO ADSENSE:")
        
        self.stdout.write("Para verificar se o site est√° aprovado:")
        self.stdout.write("1. Acesse https://www.google.com/adsense/")
        self.stdout.write("2. V√° em 'Sites'")
        self.stdout.write("3. Verifique se radarbr.com est√° aprovado")
        self.stdout.write("4. Aguarde at√© 48h ap√≥s aprova√ß√£o para an√∫ncios aparecerem")

    def _check_ad_blockers(self):
        self.stdout.write("\nüö´ BLOQUEADORES DE AN√öNCIOS:")
        
        self.stdout.write("Poss√≠veis causas dos an√∫ncios n√£o aparecerem:")
        self.stdout.write("1. uBlock Origin")
        self.stdout.write("2. AdBlock Plus")
        self.stdout.write("3. AdGuard")
        self.stdout.write("4. Bloqueador nativo do navegador")
        self.stdout.write("5. Extens√µes de privacidade")
        
        self.stdout.write("\nPara testar:")
        self.stdout.write("1. Abra o site em modo inc√≥gnito")
        self.stdout.write("2. Desative todas as extens√µes")
        self.stdout.write("3. Teste em navegador diferente")
