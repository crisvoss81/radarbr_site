#!/bin/bash
# Script de automa√ß√£o completa para RadarBR
# Executa busca de t√≥picos, gera√ß√£o de not√≠cias e publica√ß√£o automaticamente

echo "=== AUTOMA√á√ÉO COMPLETA RADARBR ==="
echo "Iniciado em: $(date)"

# Mudar para o diret√≥rio do projeto
cd /opt/render/project/src

# Ativar ambiente virtual
source .venv/bin/activate

# Fun√ß√£o para log com timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para executar comando com retry
execute_with_retry() {
    local cmd="$1"
    local max_attempts=3
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "Tentativa $attempt de $max_attempts: $cmd"
        
        if eval "$cmd"; then
            log "‚úÖ Comando executado com sucesso"
            return 0
        else
            log "‚ùå Falha na tentativa $attempt"
            attempt=$((attempt + 1))
            sleep 5
        fi
    done
    
    log "‚ùå Comando falhou ap√≥s $max_attempts tentativas"
    return 1
}

# 1. Verificar not√≠cias recentes
log "Verificando not√≠cias recentes..."
python manage.py shell -c "
from django.utils import timezone
from datetime import timedelta
from rb_noticias.models import Noticia

total = Noticia.objects.count()
recentes = Noticia.objects.filter(
    criado_em__gte=timezone.now() - timedelta(hours=6)
).count()

print(f'Total not√≠cias: {total}')
print(f'√öltimas 6h: {recentes}')

if recentes < 2:
    print('EXECUTE_AUTOMATION')
else:
    print('SKIP_AUTOMATION')
"

# Capturar resultado da verifica√ß√£o
check_result=$(python manage.py shell -c "
from django.utils import timezone
from datetime import timedelta
from rb_noticias.models import Noticia

recentes = Noticia.objects.filter(
    criado_em__gte=timezone.now() - timedelta(hours=6)
).count()

if recentes < 2:
    print('EXECUTE_AUTOMATION')
else:
    print('SKIP_AUTOMATION')
" | tail -1)

if [ "$check_result" = "EXECUTE_AUTOMATION" ]; then
    log "‚ö†Ô∏è Poucas not√≠cias recentes - executando automa√ß√£o completa..."
    
    # 2. Executar busca de t√≥picos trending
    log "üîç Buscando t√≥picos trending..."
    execute_with_retry "python manage.py smart_trends_publish --strategy trending --limit 2 --force"
    
    # 3. Executar busca baseada na audi√™ncia
    log "üë• Buscando t√≥picos baseados na audi√™ncia..."
    execute_with_retry "python manage.py smart_trends_publish --strategy audience --limit 2 --force"
    
    # 4. Executar estrat√©gia mista
    log "üéØ Executando estrat√©gia mista..."
    execute_with_retry "python manage.py smart_trends_publish --strategy mixed --limit 3 --force"
    
    # 5. Verificar resultados
    log "üìä Verificando resultados..."
    python manage.py shell -c "
from django.utils import timezone
from datetime import timedelta
from rb_noticias.models import Noticia

total = Noticia.objects.count()
recentes = Noticia.objects.filter(
    criado_em__gte=timezone.now() - timedelta(hours=1)
).count()

print(f'Total not√≠cias: {total}')
print(f'Novas not√≠cias (√∫ltima hora): {recentes}')
"
    
    # 6. Ping sitemap
    log "üó∫Ô∏è Atualizando sitemap..."
    execute_with_retry "python manage.py ping_sitemap"
    
    log "‚úÖ Automa√ß√£o completa executada com sucesso!"
    
else
    log "‚úÖ Quantidade adequada de not√≠cias recentes - pulando automa√ß√£o"
fi

# 7. Mostrar estat√≠sticas finais
log "üìà Estat√≠sticas finais:"
python manage.py shell -c "
from django.utils import timezone
from datetime import timedelta
from rb_noticias.models import Noticia

total = Noticia.objects.count()
hoje = Noticia.objects.filter(
    criado_em__gte=timezone.now().replace(hour=0, minute=0, second=0, microsecond=0)
).count()
ultima_hora = Noticia.objects.filter(
    criado_em__gte=timezone.now() - timedelta(hours=1)
).count()

print(f'Total: {total} not√≠cias')
print(f'Hoje: {hoje} not√≠cias')
print(f'√öltima hora: {ultima_hora} not√≠cias')
"

# 8. Mostrar √∫ltimas not√≠cias
log "üì∞ √öltimas 5 not√≠cias:"
python manage.py shell -c "
from rb_noticias.models import Noticia
for n in Noticia.objects.order_by('-criado_em')[:5]:
    print(f'- {n.titulo} ({n.criado_em.strftime(\"%H:%M\")})')
"

log "=== AUTOMA√á√ÉO CONCLU√çDA ==="
echo "Finalizado em: $(date)"
