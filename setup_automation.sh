#!/bin/bash
# Script de configura√ß√£o do sistema inteligente de automa√ß√£o
# Configura e testa todos os componentes do sistema

echo "=== CONFIGURA√á√ÉO DO SISTEMA INTELIGENTE DE AUTOMA√á√ÉO ==="

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto Django"
    exit 1
fi

log "‚úì Diret√≥rio do projeto confirmado"

# 1. Verificar depend√™ncias Python
log "1. Verificando depend√™ncias Python..."
python -c "
import sys
dependencies = ['django', 'requests', 'slugify']
missing = []
for dep in dependencies:
    try:
        __import__(dep)
        print(f'‚úì {dep}')
    except ImportError:
        missing.append(dep)
        print(f'‚úó {dep}')

if missing:
    print(f'‚ùå Depend√™ncias faltando: {missing}')
    sys.exit(1)
else:
    print('‚úÖ Todas as depend√™ncias est√£o instaladas')
"

if [ $? -ne 0 ]; then
    log "‚ùå Instale as depend√™ncias: pip install -r requirements.txt"
    exit 1
fi

# 2. Verificar configura√ß√£o Django
log "2. Verificando configura√ß√£o Django..."
python manage.py check --deploy
if [ $? -eq 0 ]; then
    log "‚úÖ Django configurado corretamente"
else
    log "‚ùå Problemas na configura√ß√£o Django"
    exit 1
fi

# 3. Testar comandos de automa√ß√£o
log "3. Testando comandos de automa√ß√£o..."

# Teste do comando de diagn√≥stico
log "Testando comando de diagn√≥stico..."
python manage.py diagnostico_automacao
if [ $? -eq 0 ]; then
    log "‚úÖ Comando de diagn√≥stico funcionando"
else
    log "‚ö†Ô∏è Comando de diagn√≥stico com problemas"
fi

# Teste do comando de automa√ß√£o simples
log "Testando automa√ß√£o simples..."
python manage.py automacao_simples --limit 1 --force
if [ $? -eq 0 ]; then
    log "‚úÖ Automa√ß√£o simples funcionando"
else
    log "‚ö†Ô∏è Automa√ß√£o simples com problemas"
fi

# Teste do sistema inteligente
log "Testando sistema inteligente..."
python manage.py smart_automation --mode test
if [ $? -eq 0 ]; then
    log "‚úÖ Sistema inteligente funcionando"
else
    log "‚ö†Ô∏è Sistema inteligente com problemas"
fi

# 4. Verificar configura√ß√£o de cron jobs
log "4. Verificando configura√ß√£o de cron jobs..."
if [ -f "render.yaml" ]; then
    cron_count=$(grep -c "type: cron" render.yaml)
    log "‚úì ${cron_count} cron jobs configurados no render.yaml"
else
    log "‚ö†Ô∏è Arquivo render.yaml n√£o encontrado"
fi

# 5. Verificar scripts
log "5. Verificando scripts..."
scripts=("scripts/smart_scheduler.sh" "scripts/automation.sh")
for script in "${scripts[@]}"; do
    if [ -f "$script" ]; then
        chmod +x "$script"
        log "‚úì $script configurado e execut√°vel"
    else
        log "‚ö†Ô∏è $script n√£o encontrado"
    fi
done

# 6. Teste de performance
log "6. Testando monitor de performance..."
python manage.py monitor_performance --period 1h
if [ $? -eq 0 ]; then
    log "‚úÖ Monitor de performance funcionando"
else
    log "‚ö†Ô∏è Monitor de performance com problemas"
fi

# 7. Resumo da configura√ß√£o
log "7. RESUMO DA CONFIGURA√á√ÉO:"
echo ""
echo "üìä STATUS DO SISTEMA:"
echo "‚úÖ Django: Configurado"
echo "‚úÖ Depend√™ncias: Instaladas"
echo "‚úÖ Comandos: Funcionando"
echo "‚úÖ Scripts: Configurados"
echo "‚úÖ Cron Jobs: Configurados"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "1. Configure as vari√°veis de ambiente no Render:"
echo "   - OPENAI_API_KEY (para IA)"
echo "   - UNSPLASH_API_KEY (para imagens)"
echo "   - PEXELS_API_KEY (para imagens)"
echo "   - CLOUDINARY_CLOUD_NAME (para upload)"
echo "   - CLOUDINARY_API_KEY (para upload)"
echo "   - CLOUDINARY_API_SECRET (para upload)"
echo ""
echo "2. Fa√ßa deploy no Render:"
echo "   git add ."
echo "   git commit -m 'Configure smart automation system'"
echo "   git push origin main"
echo ""
echo "3. Monitore os logs no Render Dashboard"
echo ""
echo "4. Execute comandos manuais se necess√°rio:"
echo "   python manage.py smart_automation --mode auto"
echo "   python manage.py monitor_performance --period 24h"
echo ""
echo "üéØ SISTEMA CONFIGURADO COM SUCESSO!"
echo "O sistema agora executar√° automaticamente nos hor√°rios otimizados:"
echo "- 8h, 12h, 15h, 18h, 20h (sistema inteligente)"
echo "- A cada 2h (sistema de fallback)"
echo "- 6h (monitor de performance)"
