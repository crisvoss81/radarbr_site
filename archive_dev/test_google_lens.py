# rb_ingestor/management/commands/test_google_lens.py
"""
Comando para testar an√°lise com Google Lens e busca de imagens similares
"""
from django.core.management.base import BaseCommand
from rb_ingestor.google_lens_analyzer import google_lens_analyzer

class Command(BaseCommand):
    help = "Testa an√°lise com Google Lens e busca de imagens similares"

    def add_arguments(self, parser):
        parser.add_argument("url", type=str, help="URL da not√≠cia para analisar")
        parser.add_argument("--max-results", type=int, default=6, help="N√∫mero m√°ximo de imagens similares")

    def handle(self, *args, **options):
        url = options['url']
        max_results = options['max_results']
        
        self.stdout.write("=== TESTE GOOGLE LENS + BUSCA SIMILAR ===")
        self.stdout.write(f"URL: {url}")
        self.stdout.write(f"Max resultados: {max_results}")
        self.stdout.write("")
        
        # Primeiro extrair a imagem da not√≠cia
        from rb_ingestor.image_analyzer import image_analyzer
        image_url = image_analyzer.extract_main_image_from_url(url)
        
        if not image_url:
            self.stdout.write("‚ùå Nenhuma imagem encontrada na not√≠cia")
            return
        
        self.stdout.write(f"üì∏ Imagem encontrada: {image_url}")
        self.stdout.write("")
        
        # Analisar com Google Lens e buscar similares
        result = google_lens_analyzer.find_similar_images(image_url, max_results)
        
        if not result['success']:
            self.stdout.write(f"‚ùå {result['error']}")
            return
        
        # Mostrar resultados
        self.stdout.write("‚úÖ GOOGLE LENS + BUSCA VISUAL CONCLU√çDA!")
        self.stdout.write("")
        
        self.stdout.write("ü§ñ AN√ÅLISE VISUAL DO GOOGLE LENS:")
        analysis = result['google_lens_analysis']
        self.stdout.write(f"   Objetos detectados: {', '.join(analysis['objects_detected'])}")
        self.stdout.write(f"   Caracter√≠sticas visuais: {', '.join(analysis['visual_features'])}")
        self.stdout.write(f"   Cores: {', '.join(analysis['colors'])}")
        self.stdout.write(f"   Tipo: {analysis['image_type']}")
        self.stdout.write(f"   Confian√ßa: {analysis['confidence']:.2f}")
        self.stdout.write("")
        
        self.stdout.write("üîç TERMOS DE BUSCA VISUAL:")
        search_terms = result['objects_detected'] + result['visual_features']
        for i, term in enumerate(search_terms[:8], 1):  # Mostrar apenas os 8 primeiros
            self.stdout.write(f"   {i}. {term}")
        self.stdout.write("")
        
        self.stdout.write(f"üñºÔ∏è IMAGENS SIMILARES ENCONTRADAS ({len(result['similar_images'])}):")
        self.stdout.write("")
        
        for i, img in enumerate(result['similar_images'], 1):
            self.stdout.write(f"   {i}. [{img['source'].upper()}] Similaridade: {img['similarity_score']:.2f}")
            self.stdout.write(f"      URL: {img['url']}")
            self.stdout.write(f"      Alt: {img['alt'][:50]}...")
            self.stdout.write(f"      Cr√©dito: {img['credit']}")
            self.stdout.write("")
        
        self.stdout.write("üéØ PR√ìXIMO PASSO:")
        self.stdout.write("   Integrar essa busca no fluxo de publica√ß√£o de artigos")
